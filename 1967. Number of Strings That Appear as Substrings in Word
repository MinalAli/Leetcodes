class Solution:
    def numOfStrings(self, patterns: list[str], word: str) -> int:
        count = 0
        
        for pattern in patterns:
            # Manually check if pattern exists in word
            found = False
            for i in range(len(word) - len(pattern) + 1):
                match = True
                for j in range(len(pattern)):
                    if word[i + j] != pattern[j]:
                        match = False
                        break
                if match:
                    found = True
                    break
            
            if found:
                count += 1
        
        return count
    
    # Time Complexity: O(m * n) - Checking if a substring of length m exists in a word of length n.
    # Space Complexity: O(1) - Only a few integer variables are used.
