# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = head  # Slow pointer starts at the head
        fast = head  # Fast pointer starts at the head
        
        # Traverse the list: slow moves 1 step, fast moves 2 steps
        while fast and fast.next:
            slow = slow.next         # Move slow pointer by 1 step
            fast = fast.next.next    # Move fast pointer by 2 steps
        
        # When fast pointer reaches the end, slow pointer is at the middle
        return slow
